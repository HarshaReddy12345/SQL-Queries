
alter VIEW [dbo].[vCore_ibals_0]
	AS
	SELECT
	  iProduct,
	  iDate,
	  iTransactionId,
	  iInvTag,
	  SUM(IssuesVal) fQiss,
	  SUM(RctVal) fQrec,
	  SUM(mStockValue) mVal,
	  0 fAltQty,
	  0 fQCQty
	FROM (SELECT
	  iDate,
	  iProduct,
	  iInvTag,
	  c.fQuantity,
	  c.fQuantityinBase,
	  b.iTransactionId,
	  CASE
		WHEN c.fQuantityInBase < 0 THEN fQuantityInBase
		ELSE 0
	  END IssuesVal,
	  CASE
		WHEN c.fQuantityInBase > 0 THEN fQuantityInBase
		ELSE 0
	  END RctVal,
	  CASE
		WHEN fQuantityInBase > 0 THEN mStockValue
		ELSE 0
	  END mStockValue
	FROM tCore_Header_0 a WITH (READUNCOMMITTED)
	JOIN tCore_Data_0 b WITH (READUNCOMMITTED)
	  ON a.iHeaderId = b.iHeaderId
	JOIN tCore_Indta_0 c WITH (READUNCOMMITTED)
	  ON b.iBodyId = c.iBodyId
	WHERE bUpdateStocks = 1
	AND bSuspended = 0
	AND iAuthStatus < 2
	AND bSuspendUpdateStocks = 0) a
	GROUP BY iDate,
			 iProduct,
			 iInvTag,
			 iTransactionId

	GO




create  function  [dbo].[udf_ProdBalQtyWH](@iDate int,@iProd int) returns float
AS
begin
return(
	SELECT sum( fQuantityInBase )	 
		FROM tCore_Header_0 a WITH (READUNCOMMITTED)
		JOIN tCore_Data_0 b WITH (READUNCOMMITTED)
		  ON a.iHeaderId = b.iHeaderId
		JOIN tCore_Indta_0 c WITH (READUNCOMMITTED)
		  ON b.iBodyId = c.iBodyId
		WHERE bUpdateStocks = 1
		AND bSuspended = 0
		AND iAuthStatus < 2
		AND bSuspendUpdateStocks = 0
		and a.idate <= @iDate
		and c.iProduct = @iProd
)
			
end



	GO